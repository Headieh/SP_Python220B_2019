#__________________________________________________________________________________________
# The first timeit test shows the customers and products threads executing in 
# in parallel with a best of five recording at 68.1 msec per loop. The linear timeit
# test shows customers and products completing at different times and the best of 
# five recording higher that the parallel at 90.4 msec per loop.
#__________________________________________________________________________________________


ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ python -m timeit -n 10 -v "import parallel; parallel.import_data('data_files', 'products.csv', 'customers.csv', 'rentals.csv')"
(1000, 0, 1000, 0.18748164176940918) (1000, 0, 1000, 0.18748164176940918)
(1000, 1000, 2000, 0.04288363456726074) (1000, 1000, 2000, 0.04288363456726074)
(1000, 2000, 3000, 0.03892779350280762) (1000, 2000, 3000, 0.03892779350280762)
(1000, 3000, 4000, 0.043908119201660156) (1000, 3000, 4000, 0.043908119201660156)
(1000, 4000, 5000, 0.05784463882446289) (1000, 4000, 5000, 0.05784463882446289)
(1000, 5000, 6000, 0.06482625007629395) (1000, 5000, 6000, 0.06482625007629395)
(1000, 6000, 7000, 0.05285930633544922) (1000, 6000, 7000, 0.05285930633544922)
(1000, 7000, 8000, 0.06283259391784668) (1000, 7000, 8000, 0.06283259391784668)
(1000, 8000, 9000, 0.05884146690368652) (1000, 8000, 9000, 0.05884146690368652)
(1000, 9000, 10000, 0.0638282299041748) (1000, 9000, 10000, 0.0638282299041748)
(1000, 10000, 11000, 0.05781292915344238) (1000, 10000, 11000, 0.05781292915344238)
(1000, 11000, 12000, 0.05684781074523926) (1000, 11000, 12000, 0.05684781074523926)
(1000, 12000, 13000, 0.16057038307189941) (1000, 12000, 13000, 0.16057038307189941)
(1000, 13000, 14000, 0.05186057090759277) (1000, 13000, 14000, 0.05186057090759277)
(1000, 14000, 15000, 0.0588681697845459) (1000, 14000, 15000, 0.0588681697845459)
(1000, 15000, 16000, 0.07679486274719238) (1000, 15000, 16000, 0.07679486274719238)
(1000, 16000, 17000, 0.06283211708068848) (1000, 16000, 17000, 0.06283211708068848)
(1000, 17000, 18000, 0.07083678245544434) (1000, 17000, 18000, 0.07083678245544434)
(1000, 18000, 19000, 0.06383085250854492) (1000, 18000, 19000, 0.06383085250854492)
(1000, 19000, 20000, 0.0718088150024414) (1000, 19000, 20000, 0.0718088150024414)
(1000, 20000, 21000, 0.04886960983276367) (1000, 20000, 21000, 0.04886960983276367)
(1000, 21000, 22000, 0.06183457374572754) (1000, 21000, 22000, 0.06183457374572754)
(1000, 22000, 23000, 0.06482577323913574) (1000, 22000, 23000, 0.06482577323913574)
(1000, 23000, 24000, 0.07779169082641602) (1000, 23000, 24000, 0.07779169082641602)
(1000, 24000, 25000, 0.07779145240783691) (1000, 24000, 25000, 0.07779145240783691)
(1000, 25000, 26000, 0.06582355499267578) (1000, 25000, 26000, 0.06582355499267578)
(1000, 26000, 27000, 0.06981301307678223) (1000, 26000, 27000, 0.06981301307678223)
(1000, 27000, 28000, 0.06781816482543945) (1000, 27000, 28000, 0.06781816482543945)
(1000, 28000, 29000, 0.07779335975646973) (1000, 28000, 29000, 0.07779335975646973)
(1000, 29000, 30000, 0.07679557800292969) (1000, 29000, 30000, 0.07679557800292969)
(1000, 30000, 31000, 0.06485867500305176) (1000, 30000, 31000, 0.06485867500305176)
(1000, 31000, 32000, 0.055867910385131836) (1000, 31000, 32000, 0.055867910385131836)
(1000, 32000, 33000, 0.06685209274291992) (1000, 32000, 33000, 0.06685209274291992)
(1000, 33000, 34000, 0.06781935691833496) (1000, 33000, 34000, 0.06781935691833496)
(1000, 34000, 35000, 0.05884265899658203) (1000, 34000, 35000, 0.05884265899658203)
(1000, 35000, 36000, 0.07679390907287598) (1000, 35000, 36000, 0.07679390907287598)
(1000, 36000, 37000, 0.07084298133850098) (1000, 36000, 37000, 0.07084298133850098)
(1000, 37000, 38000, 0.0628664493560791) (1000, 37000, 38000, 0.0628664493560791)
(1000, 38000, 39000, 0.08281111717224121) (1000, 38000, 39000, 0.08281111717224121)
(1000, 39000, 40000, 0.061870574951171875) (1000, 39000, 40000, 0.061870574951171875)
(1000, 40000, 41000, 0.08172917366027832) (1000, 40000, 41000, 0.08172917366027832)
(1000, 41000, 42000, 0.07280325889587402) (1000, 41000, 42000, 0.07280325889587402)
(1000, 42000, 43000, 0.06183481216430664) (1000, 42000, 43000, 0.06183481216430664)
(1000, 43000, 44000, 0.06482434272766113) (1000, 43000, 44000, 0.06482434272766113)
(1000, 44000, 45000, 0.07483172416687012) (1000, 44000, 45000, 0.07483172416687012)
(1000, 45000, 46000, 0.08879876136779785) (1000, 45000, 46000, 0.08879876136779785)
(1000, 46000, 47000, 0.08976006507873535) (1000, 46000, 47000, 0.08976006507873535)
(1000, 47000, 48000, 0.06587576866149902) (1000, 47000, 48000, 0.06587576866149902)
(1000, 48000, 49000, 0.13566899299621582) (1000, 48000, 49000, 0.13566899299621582)
(1000, 49000, 50000, 0.07280516624450684) (1000, 49000, 50000, 0.07280516624450684)
raw times: 793 msec, 744 msec, 703 msec, 681 msec, 820 msec

10 loops, best of 5: 68.1 msec per loop



ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ python -m timeit -n 10 -v "import linear; linear.import_data('data_files', 'products.csv', 'customers.csv', 'rentals.csv')"
(1000, 0, 1000, 0.21846818923950195) (1000, 0, 1000, 0.07378315925598145)
(1000, 1000, 2000, 0.031914472579956055) (1000, 1000, 2000, 0.016954660415649414)
(1000, 2000, 3000, 0.030916929244995117) (1000, 2000, 3000, 0.021942615509033203)
(1000, 3000, 4000, 0.02293872833251953) (1000, 3000, 4000, 0.02593064308166504)
(1000, 4000, 5000, 0.029921293258666992) (1000, 4000, 5000, 0.019945144653320312)
(1000, 5000, 6000, 0.022936582565307617) (1000, 5000, 6000, 0.026928424835205078)
(1000, 6000, 7000, 0.024932384490966797) (1000, 6000, 7000, 0.022939682006835938)
(1000, 7000, 8000, 0.026928186416625977) (1000, 7000, 8000, 0.026927947998046875)
(1000, 8000, 9000, 0.022939205169677734) (1000, 8000, 9000, 0.020946264266967773)
(1000, 9000, 10000, 0.02992105484008789) (1000, 9000, 10000, 0.019946813583374023)
(1000, 10000, 11000, 0.022938966751098633) (1000, 10000, 11000, 0.021941423416137695)
(1000, 11000, 12000, 0.021941661834716797) (1000, 11000, 12000, 0.025930404663085938)
(1000, 12000, 13000, 0.02393627166748047) (1000, 12000, 13000, 0.021940946578979492)
(1000, 13000, 14000, 0.022939205169677734) (1000, 13000, 14000, 0.024932861328125)
(1000, 14000, 15000, 0.02293872833251953) (1000, 14000, 15000, 0.02297806739807129)
(1000, 15000, 16000, 0.021941184997558594) (1000, 15000, 16000, 0.019947290420532227)
(1000, 16000, 17000, 0.024960994720458984) (1000, 16000, 17000, 0.019919395446777344)
(1000, 17000, 18000, 0.022937774658203125) (1000, 17000, 18000, 0.02493453025817871)
(1000, 18000, 19000, 0.024934768676757812) (1000, 18000, 19000, 0.020943403244018555)
(1000, 19000, 20000, 0.027926206588745117) (1000, 19000, 20000, 0.019947052001953125)
(1000, 20000, 21000, 0.023935794830322266) (1000, 20000, 21000, 0.026928424835205078)
(1000, 21000, 22000, 0.028923988342285156) (1000, 21000, 22000, 0.023934364318847656)
(1000, 22000, 23000, 0.018949508666992188) (1000, 22000, 23000, 0.014994621276855469)
(1000, 23000, 24000, 0.01894998550415039) (1000, 23000, 24000, 0.015958070755004883)
(1000, 24000, 25000, 0.01792001724243164) (1000, 24000, 25000, 0.014992475509643555)
(1000, 25000, 26000, 0.01694965362548828) (1000, 25000, 26000, 0.015925168991088867)
(1000, 26000, 27000, 0.018987655639648438) (1000, 26000, 27000, 0.01492166519165039)
(1000, 27000, 28000, 0.017953157424926758) (1000, 27000, 28000, 0.014958858489990234)
(1000, 28000, 29000, 0.01795220375061035) (1000, 28000, 29000, 0.015906810760498047)
(1000, 29000, 30000, 0.021941423416137695) (1000, 29000, 30000, 0.015958070755004883)
(1000, 30000, 31000, 0.02094554901123047) (1000, 30000, 31000, 0.015957117080688477)
(1000, 31000, 32000, 0.016954660415649414) (1000, 31000, 32000, 0.015958070755004883)
(1000, 32000, 33000, 0.016955852508544922) (1000, 32000, 33000, 0.01590561866760254)
(1000, 33000, 34000, 0.017919540405273438) (1000, 33000, 34000, 0.01599407196044922)
(1000, 34000, 35000, 0.017984390258789062) (1000, 34000, 35000, 0.014928817749023438)
(1000, 35000, 36000, 0.017901182174682617) (1000, 35000, 36000, 0.016955137252807617)
(1000, 36000, 37000, 0.017952442169189453) (1000, 36000, 37000, 0.015012502670288086)
(1000, 37000, 38000, 0.017910003662109375) (1000, 37000, 38000, 0.015984296798706055)
(1000, 38000, 39000, 0.017983436584472656) (1000, 38000, 39000, 0.021908998489379883)
(1000, 39000, 40000, 0.017951488494873047) (1000, 39000, 40000, 0.014960050582885742)
(1000, 40000, 41000, 0.016973018646240234) (1000, 40000, 41000, 0.01595759391784668)
(1000, 41000, 42000, 0.01796746253967285) (1000, 41000, 42000, 0.015958547592163086)
(1000, 42000, 43000, 0.016951560974121094) (1000, 42000, 43000, 0.01595783233642578)
(1000, 43000, 44000, 0.01895284652709961) (1000, 43000, 44000, 0.014933109283447266)
(1000, 44000, 45000, 0.01796746253967285) (1000, 44000, 45000, 0.015909194946289062)
(1000, 45000, 46000, 0.017985105514526367) (1000, 45000, 46000, 0.014927148818969727)
(1000, 46000, 47000, 0.017952442169189453) (1000, 46000, 47000, 0.015957355499267578)
(1000, 47000, 48000, 0.017989635467529297) (1000, 47000, 48000, 0.01596808433532715)
(1000, 48000, 49000, 0.016969919204711914) (1000, 48000, 49000, 0.014942169189453125)
(1000, 49000, 50000, 0.01894831657409668) (1000, 49000, 50000, 0.016988754272460938)
raw times: 1.25 sec, 904 msec, 968 msec, 1.11 sec, 1.39 sec

10 loops, best of 5: 90.4 msec per loop



#__________________________________________________________________________________________
# Timeit with a repeat of 10 resulted in a significant diffenence with 110 msec for parallel
# and 191 msec for linear.
#__________________________________________________________________________________________



ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ python -m timeit -r 10 -v -t "import parallel; parallel.import_data('data_files', 'products.csv', 'customers.csv', 'rentals.csv')"
(1000, 103000, 104000, 0.11369752883911133) (1000, 103000, 104000, 0.11369752883911133)
1 loop -> 0.215 secs

(1000, 104000, 105000, 0.10869097709655762) (1000, 104000, 105000, 0.10869097709655762)
(1000, 105000, 106000, 0.12566494941711426) (1000, 105000, 106000, 0.12566494941711426)
(1000, 106000, 107000, 0.1575782299041748) (1000, 106000, 107000, 0.1575782299041748)
(1000, 107000, 108000, 0.1466081142425537) (1000, 107000, 108000, 0.1466081142425537)
(1000, 108000, 109000, 0.13364315032958984) (1000, 108000, 109000, 0.13364315032958984)
(1000, 109000, 110000, 0.1436150074005127) (1000, 109000, 110000, 0.1436150074005127)
(1000, 110000, 111000, 0.19148588180541992) (1000, 110000, 111000, 0.19148588180541992)
(1000, 111000, 112000, 0.13463926315307617) (1000, 111000, 112000, 0.13463926315307617)
(1000, 112000, 113000, 0.1346907615661621) (1000, 112000, 113000, 0.1346907615661621)
(1000, 113000, 114000, 0.14760518074035645) (1000, 113000, 114000, 0.14760518074035645)
raw times: 110 msec, 127 msec, 159 msec, 149 msec, 135 msec, 145 msec, 193 msec, 137 msec, 137 msec, 149 msec

1 loop, best of 10: 110 msec per loop




ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ python -m timeit -r 10 -v -t "import linear; linear.import_data('data_files', 'products.csv', 'customers.csv', 'rentals.csv')"
(1000, 92000, 93000, 0.018002033233642578) (1000, 92000, 93000, 0.01590752601623535)
1 loop -> 0.296 secs

(1000, 93000, 94000, 0.030953645706176758) (1000, 93000, 94000, 0.01791548728942871)
(1000, 94000, 95000, 0.024934053421020508) (1000, 94000, 95000, 0.022938013076782227)
(1000, 95000, 96000, 0.022939443588256836) (1000, 95000, 96000, 0.02194046974182129)
(1000, 96000, 97000, 0.021941184997558594) (1000, 96000, 97000, 0.015957355499267578)
(1000, 97000, 98000, 0.0249330997467041) (1000, 97000, 98000, 0.021941184997558594)
(1000, 98000, 99000, 0.024933338165283203) (1000, 98000, 99000, 0.0219419002532959)
(1000, 99000, 100000, 0.02289605140686035) (1000, 99000, 100000, 0.021941423416137695)
(1000, 100000, 101000, 0.022939443588256836) (1000, 100000, 101000, 0.020943403244018555)
(1000, 101000, 102000, 0.01789712905883789) (1000, 101000, 102000, 0.015011072158813477)
(1000, 102000, 103000, 0.018954038619995117) (1000, 102000, 103000, 0.016955137252807617)
raw times: 212 msec, 224 msec, 224 msec, 212 msec, 229 msec, 241 msec, 234 msec, 222 msec, 191 msec, 199 msec

1 loop, best of 10: 191 msec per loop



#__________________________________________________________________________________________
# The standard time command did not yeild much of a difference in real time.
#__________________________________________________________________________________________


ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ time python parallel.py
(1000, 9000, 10000, 0.05983996391296387) (1000, 9000, 10000, 0.05983996391296387)

real    0m0.846s
user    0m0.000s
sys     0m0.046s



ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ time python linear.py
(1000, 9000, 10000, 0.021940946578979492) (1000, 9000, 10000, 0.02094435691833496)

real    0m0.853s
user    0m0.000s
sys     0m0.062s



#__________________________________________________________________________________________
# Timeit on the whole module came to a very similar result as the stardard time command.
#__________________________________________________________________________________________



ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ python -m timeit -v "import parallel; parallel"
1 loop -> 0.108 secs
2 loops -> 2e-06 secs
5 loops -> 1.6e-06 secs
10 loops -> 2e-06 secs
20 loops -> 2.8e-06 secs
50 loops -> 5.5e-06 secs
100 loops -> 9.8e-06 secs
200 loops -> 1.93e-05 secs
500 loops -> 4.47e-05 secs
1000 loops -> 8.94e-05 secs
2000 loops -> 0.000177 secs
5000 loops -> 0.00044 secs
10000 loops -> 0.000864 secs
20000 loops -> 0.00174 secs
50000 loops -> 0.00434 secs
100000 loops -> 0.00857 secs
200000 loops -> 0.0171 secs
500000 loops -> 0.0439 secs
1000000 loops -> 0.0858 secs
2000000 loops -> 0.171 secs
5000000 loops -> 0.425 secs

raw times: 455 msec, 428 msec, 423 msec, 425 msec, 426 msec

5000000 loops, best of 5: 84.7 nsec per loop



ganyo@AG-PC ~/Desktop/Python_UW/SP_Python220B_2019/students/ganyoa/lessons/lesson07/assignment (master)
$ python -m timeit -v "import linear; linear"
1 loop -> 0.112 secs
2 loops -> 2.9e-06 secs
5 loops -> 1.7e-06 secs
10 loops -> 2e-06 secs
20 loops -> 3e-06 secs
50 loops -> 5.8e-06 secs
100 loops -> 1.01e-05 secs
200 loops -> 1.94e-05 secs
500 loops -> 4.56e-05 secs
1000 loops -> 9.38e-05 secs
2000 loops -> 0.000182 secs
5000 loops -> 0.000447 secs
10000 loops -> 0.000908 secs
20000 loops -> 0.00179 secs
50000 loops -> 0.00448 secs
100000 loops -> 0.00894 secs
200000 loops -> 0.0179 secs
500000 loops -> 0.0448 secs
1000000 loops -> 0.151 secs
2000000 loops -> 0.177 secs
5000000 loops -> 0.438 secs

raw times: 439 msec, 438 msec, 438 msec, 439 msec, 437 msec

5000000 loops, best of 5: 87.4 nsec per loop

