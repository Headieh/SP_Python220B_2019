Analysis:

In linear.py, 3 data files are loaded sequentially.  That is, the processing of the 2nd file does not complete until the first is finsihed.  Using this methiod, the average time to load all 3 data files takes 1.8485 seconds.

In parallel.py, 3 data files are loaded concurrently.  This is, all three files are loaded in parallel.  Results are published and read from a queue and then pubished.  Using this method, the average time to load all 3 data files takes 1.3953 seconds, an approximate 24.5% performance improvement over sequential loading of data.

Interestingly, the average time to load a single file is only appoximately 0.6 seconds using sequential loading versus approximately 1.3 seconds using parallel loading, most likely due to resource contention when loading data in parallel.  However, even with resource contention, the benefit of running in parallel was enough to still be baster than a squential loading strategy.


Loading data sequentially:
Run #1
('product', 1000, 0, 1000, '0:00:00.663581')
('customer', 1000, 0, 1000, '0:00:00.592377')
('rental', 1000, 0, 1000, '0:00:00.642595')
Total time: 1.964459
Run #2
('product', 1000, 0, 1000, '0:00:00.576463')
('customer', 1000, 0, 1000, '0:00:00.566860')
('rental', 1000, 0, 1000, '0:00:00.592312')
Total time: 1.777065
Run #3
('product', 1000, 0, 1000, '0:00:00.615589')
('customer', 1000, 0, 1000, '0:00:00.563772')
('rental', 1000, 0, 1000, '0:00:00.579840')
Total time: 1.803996

Loading data in parallel:
Run #1
('customer', 1000, 0, 1000, '0:00:01.323831')
('rental', 1000, 0, 1000, '0:00:01.334556')
('product', 1000, 0, 1000, '0:00:01.347041')
Total time: 1.401339
Run #2
('product', 1000, 0, 1000, '0:00:01.320373')
('customer', 1000, 0, 1000, '0:00:01.326540')
('rental', 1000, 0, 1000, '0:00:01.326994')
Total time: 1.379879
Run#3
('product', 1000, 0, 1000, '0:00:01.292827')
('rental', 1000, 0, 1000, '0:00:01.308164')
('customer', 1000, 0, 1000, '0:00:01.353712')
Total time: 1.404883